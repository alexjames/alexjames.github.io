---
layout: default
title:  "Java - Primer"
date:   2018-06-11 09:09:00
categories: cs
---

# Java
A quick Java recap. Mostly summarized from the Oracle Java trails.

## Object-oriented programming (OOP) concepts

### Object
Objects are the bed-rock of OOP. An object is the software representation of an entity with it's state and associated behavior.
State is stored in `fields` and behavior is accessed through `methods`.

### Class
A class is the template used for creating an object. You use classes to instantiate objects.

```
public class Person {
    String name;
    int age;

    void setName(String new_name){
        name = new_name;
    }
}
```

### Inheritance
Objects may be grouped together based on similarity in state and behavior. For example, mountain bikes, road bikes and 
hybrid bikes are types of bikes. So you have all three classes share a lot of the common state and behavior of a class bike.
Thus we can have `MountainBike` inherit from class `Bike`. Here, Bike is the superclass and MountainBike is the subclass.
In Java, each subclass can have only one superclass. But a superclass can have an unlimited number of subclasses.

```
class MountainBike extends Bike {

}
```

### Interface
Interfaces act as a specification for classes. Typically, an interface is a group of related methods with no implementation.

```
interface Human {
    void eat();
    void sleep();
}

class Man implements Human {
    void eat() {
        hunger -= 50;
    }
    
    void sleep() {
        fatigue -= 80;
    }
}

```
Once you implement an interface, the compiler will ensure that you implement all methods as specifed by the interface.

### Packages
A package is a namespace that organizes a set of related classes and interfaces.

## Language Basics
### Variables
#### Primitives
Java is statically typed, thus all variables must be declared before use. The language defines the following kinds of
variables:
 * Instance variable (non-static): unique to each instance of a class
 * Class variable (static): Only one copy of this variable will ever exist and it's visibility spans all objects of the class
 * Local variable: Only visibile within a method
 * Parameters: passed as arguments to a function

Java variable names are case-sensitive. Though permitted, variable names will typically NOT start with dollar($) or 
underscore(\_). The variable naming convention is to use all lowercase for one-word variables such as *age*, *height*, 
*sex*, etc. and to capitalize subsequent words in case of two or more lettered words suchs as *currentAge*, *maxPierLength*,
*totalNumberOfGearsInBike*.

Primitive data types are *literals* that are directly represented in source code, and are not objects created from a 
class. These are Java's primitive data types:

Name | Size (bits) | Range
--- | --- | ---
byte | 8 | -128 to 127
short | 16 | -32768 to 32767
int | 32 | -2^31 to 2^31 - 1
long | 64 | -2^61 to 2^61 - 1
float | 32 | 32-bit IEEE floating point
double | 64 | 64-bit IEEE floating point
boolean | und. | true/false
char | 16 | UTF-16

Java also support strings natively through the `java.lang.String` class, so they've come to be thought of as primitive 
data types. Java strings are immutable, thus once created, their values cannot be changed.

Variables that are not initialized are assigned a default value, usually 0 or null by the compiler. 
The only exception are local variables, which will generate a compile-time error if you access them un-initialized.

Here are example data-type declarations along with their associated literals:

```
int ten = 10;
int hexval = 0x2a;
int binary = 0b001101;
double d = 123.4
long l = 14324L;
float f1 = 12.3f;
```
When unspecified, literals with a decimal point are double by default and those without are int be default.

Java 7 onwards, you can now put underscores in between numbers for logical grouping/readability.
```
long whiteHousePhoneNumber = 202_456_1414;
```

#### Arrays
An array is a container that holds a fixed number of elements of a certain type. They are accessed by a numerical index
starting from 0..(N-1) where N is the number of elements. They are typically declared using *type[]*.
```
int[] myArray;
int myArrayNotRecommended[];   // C-like, also allowed, but convention discourages it

myArray = new int[3];
...
myArray[2] = 9;
```

Arrays have a built-in `length` method to print their size. The `System` class has an `arraycopy` method which can be used
to copy array elements from one array into another.

```
public static void arraycopy(Object src, int srcPos,
                             Object dest, int destPos, int length)
...
int[] arrTo = new int[5];
int[] arrFrom = {1, 2, 3, 4, 5};
System.arraycopy(arrFrom, 0, arrTo, 0, 5);
```
### Operators
Java has support for arithmetic, logical, bitwise and ternary operators with syntax and behavior similar to other 
programming languages. There are separate signed (>>, <<) and unsigned (>>>, <<<) left/right shift operators.

### Conditional Flow Statements
if-blocks are similar to other languages.

```
if (isRaining) {
    person.open_umbrella();
} else if (isSunny) {
    person.put_sunscreen();
} else {
    person.walk_outside();
}
```

switch-blocks work for byte, short, char, int, enums, String and a few other wrapper types such as Byte, Integer, etc.
```
switch (day) {
    case 1:
        name = "alex";
        break;
    case 2:
        name = "kevin";
        break;
    default:
        name = "everybody else";
        break;
}

switch (month) {
    case "january":
        monthNum = 1;
    case "february":
        monthNum = 2;
}
```
for, while and do-while are the same as other languages.
```
for (int i = 0; i < 10; i++) {

}

while (true) {
    // do stuff
}


do {
    //stuff
} while (count > 5);
```
continue, break and return behave as you would expect.

## Classes and Objects
This is the skeleton of what a class declaration looks like:

```
class MyClass {
    // fields
    // constructor
    // method declarations
}
```
Access modifiers for member variables are *public*, for visibility across all classes or *private*, for restricted 
visibility within the same class. Default, when unspecified is ***public***.

In terms of naming convenctions, classes have the first letter of every word capitalized. For example, MountainBike,
MyClass, etc. Methods have the same naming convention as variables i.e. first word all lower-case followed by remanining
words capitalized, except the first word should prefereably be a verb. For example, *showName()*, *getUserAge()*, etc.

Methods can also be *overloaded*, i.e. the same method name can be used to perform different operations, and they are
distinguised by their method signatures. So instead of having a separate methods like *walkDog()*, *walkCat()*, *walkPony()*,
you can have a separate *walk()* methods taking in different parameters. Thus you have *walk(Dog d)*, *walk(Cat c)* etc.
It's pretty easy for a compiler to figure out which method you intended to call. Note that return values are not checked
as part of the signature by the compiler, so you can't have two methods with the same name but different return types.

```
This does NOT work:
void setName(String new_name){}
int setName(String new_name) {}
```

