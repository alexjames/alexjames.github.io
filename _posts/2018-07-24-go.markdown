---
layout: default
title:  "Exploring Go"
date:   2018-07-24 09:09:00
categories: cs
---

Go is a modern langauge that is steadily gaining in popularity. The language was designed at Google by heavy-weights such as Ken Thompson
and Rob Pike of Plan 9 fame. This is one of the languages I've had to pickup at my new job, so I took the opportunity to learn more about 
the language.

Types

UTF-8 Encoding: all the characters of source code in UTF-8. This means you can write something like this in
source code:
```
  fmt.Print("你好，世界")
```
   
```
import main

package "fmt"

func main() {
    fmt.Print("Hello World!")
}
```
 
 In Go, a type implements an interface by defining the required methods.
 
 Go programs are composed of packages. Every program's main method is in the *main* package.
 
 The general syntax for a Go function is as follows:

```
func function_name([list of parameters]) [return_types] {
    // function body 
}
```
This is interesting because in popular languages, you have the return type specified before the function name. While reading
from left to right, this makes for harder reading. For instance, `int myfunction(int x)`, when read from left to right
reads as "an integer return type for a function named myfunction that takes an integer as a parameter". Having it formatted 
the way Go does makes faster to gain context while reading a function header. "func myfunction(a int) int becomes "a function
named myfunction that takes an integer argument and returns an integer". The flow is arguably more natural.

```

// Simple function that adds two numbers
package main

import "fmt"

func add(a int, b int) int {
	return a + b
}

func main() {
	fmt.Println("Sum is", add(6,9))
}
```

```
package main

import "fmt"

func main() {
	// declaring a variable with its type
	var val5 int
	val5 = 5

	// declaring a variable without type
	var abc = 5

	// prints variables in space-separated format
	fmt.Print(abc, val5)
}
```

Go only has one loop construct - the `for` loop.
